const mongoCollections = require("../config/mongoCollections");
const recipes = mongoCollections.recipes;
const { ObjectId } = require('mongodb');
const helpers = require("../helpers");

const getAllRecipes = async (page) => {
    if (typeof page !== "string") throw "Page number must be a string!";
    if (page < 1) throw "Page number must be greater than 0!";

    const recipeCollection = await recipes();
    const recipeList = await recipeCollection.find({}).skip((page - 1) * 50).limit(50).toArray();
    if (!recipeList) throw "No recipes in system!";
    if (recipeList.length === 0) throw "No more recipes in system!";
    return recipeList;
};

const getrecipeById = async (id) => {
    id = helpers.isIDvalid(id);
    const recipeCollection = await recipes();
    const recipe = await recipeCollection.findOne({ _id: ObjectId(id) });
    if (!recipe) throw "Recipe not found";
    recipe._id = recipe._id.toString();
    return recipe;
};

const addRecipe = async (title, ingredients, cookingSkillRequired, steps, userThatPosted) => {
    title = helpers.isTitleValid(title);
    ingredients = helpers.isIngredientsValid(ingredients);
    steps = helpers.isStepsValid(steps);
    cookingSkillRequired = helpers.isCookingSkillRequiredValid(cookingSkillRequired);
    comments = []
    likes = []

    const recipeCollection = await recipes();
    let newRecipe = {
        title: title,
        ingredients: ingredients,
        cookingSkillRequired: cookingSkillRequired,
        steps: steps,
        userThatPosted: userThatPosted,
        comments: comments,
        likes: likes,
    };

    const insertInfo = await recipeCollection.insertOne(newRecipe);
    if (insertInfo.insertedCount === 0) throw "Could not add recipe";
    const newId = insertInfo.insertedId.toString();
    const recipe = await getrecipeById(newId);
    return recipe;
};

const updateRecipe = async (id, updatedData) => {
    id = helpers.isIDvalid(id);
    if (!updatedData) throw "You must provide data to update a recipe";
    if (!updatedData.title && !updatedData.ingredients && !updatedData.steps && !updatedData.cookingSkillRequired) {
        throw "You must provide at least one field to update";
    }

    let title = updatedData.title;
    let ingredients = updatedData.ingredients;
    let steps = updatedData.steps;
    let cookingSkillRequired = updatedData.cookingSkillRequired;
    let updatedRecipe = {};

    if (title) {
        title = helpers.isTitleValid(title);
        updatedRecipe.title = title;
    }
    if (ingredients) {
        ingredients = helpers.isIngredientsValid(ingredients);
        updatedRecipe.ingredients = ingredients;
    }
    if (steps) {
        steps = helpers.isStepsValid(steps);
        updatedRecipe.steps = steps;
    }
    if (cookingSkillRequired) {
        cookingSkillRequired = helpers.isCookingSkillRequiredValid(cookingSkillRequired);
        updatedRecipe.cookingSkillRequired = cookingSkillRequired;
    }

    const recipeCollection = await recipes();

    const updateRecipe = await recipeCollection.findOne({ _id: ObjectId(id) });
    if (!updateRecipe) throw "Recipe not found";

    const updateInfo = await recipeCollection.updateOne({ _id: ObjectId(id) }, { $set: updatedRecipe });

    if (updateInfo.modifiedCount === 0) {
        throw "could not update recipe successfully";
    }
    const recipe = await getrecipeById(id);
    return recipe;
};

// Adds a new comment to the recipe; ids must be generated by the server, and not supplied. a user needs to be logged in to post a comment.  
const addComment = async (id, comment, userThatPostedComment) => {
    id = helpers.isIDvalid(id);
    comment = helpers.isCommentValid(comment);

    const info = {}
    info._id = ObjectId();
    info.userThatPostedComment = userThatPostedComment;
    info.comment = comment;
    ;
    const recipeCollection = await recipes();

    const insertRecipe = await recipeCollection.findOne({ _id: ObjectId(id) });
    if (!insertRecipe) throw "Recipe not found";

    const updateInfo = await recipeCollection.updateOne({ _id: ObjectId(id) }, { $push: { comments: info } });

    if (updateInfo.modifiedCount === 0) {
        throw "could not update recipe successfully";
    }
    const recipe = await getrecipeById(id);
    return recipe;
};

const removeComment = async (id, commentId) => {
    id = helpers.isIDvalid(id);
    commentId = helpers.isIDvalid(commentId);

    const recipeCollection = await recipes();
    const removeRecipe = await recipeCollection.findOne({ _id: ObjectId(id) });

    if (!removeRecipe) throw "Recipe not found";
    const removeComment = await recipeCollection.findOne({ _id: ObjectId(id), "comments._id": ObjectId(commentId) });
    if (!removeComment) throw "Comment not found";

    const updateInfo = await recipeCollection.updateOne({ _id: ObjectId(id) }, { $pull: { comments: { _id: ObjectId(commentId) } } });

    if (updateInfo.modifiedCount === 0) {
        throw "could not update recipe successfully";
    }
    const recipe = await getrecipeById(id);
    return recipe;
};

const addLike = async (id, userThatLiked) => {
    id = helpers.isIDvalid(id);
    if (!userThatLiked) throw "You must provide a user that liked the recipe";
    const recipeCollection = await recipes();
    const likedRecipe = await recipeCollection.findOne({ _id: ObjectId(id) });
    if (!likedRecipe) throw "Recipe not found";
    const likeArray = likedRecipe.likes;

    if (likeArray.includes(userThatLiked)) {
        const updateInfo = await recipeCollection.updateOne({ _id: ObjectId(id) }, { $pull: { likes: userThatLiked } });
        if (updateInfo.modifiedCount === 0) {
            throw "could not update recipe successfully";
        }
    }
    else {
        const updateInfo = await recipeCollection.updateOne({ _id: ObjectId(id) }, { $push: { likes: userThatLiked } });
        if (updateInfo.modifiedCount === 0) {
            throw "could not update recipe successfully";
        }
    }
    const recipe = await getrecipeById(id);
    return recipe;
};
module.exports = { getAllRecipes, getrecipeById, addRecipe, updateRecipe, addComment, removeComment, addLike };